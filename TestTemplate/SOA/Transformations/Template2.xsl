<?xml version="1.0" encoding="UTF-8" ?>
<xsl:stylesheet version="1.0"
                xmlns:socket="http://www.oracle.com/XSL/Transform/java/oracle.tip.adapter.socket.ProtocolTranslator"
                xmlns:oracle-xsl-mapper="http://www.oracle.com/xsl/mapper/schemas"
                xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
                xmlns:mhdr="http://www.oracle.com/XSL/Transform/java/oracle.tip.mediator.service.common.functions.MediatorExtnFunction"
                xmlns:ns1="http://www.example.org" xmlns:oraxsl="http://www.oracle.com/XSL/Transform/java"
                xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
                xmlns:strClass="http://www.oracle.com/XSL/Transform/java/java.lang.String"
                exclude-result-prefixes="oracle-xsl-mapper xsi xsd xsl ns1 socket dvm mhdr oraxsl oraext xp20 xref strClass">
  <oracle-xsl-mapper:schema>
    <!--SPECIFICATION OF MAP SOURCES AND TARGETS, DO NOT MODIFY.-->
    <oracle-xsl-mapper:mapSources>
      <oracle-xsl-mapper:source/>
      <oracle-xsl-mapper:source type="XSD">
        <oracle-xsl-mapper:schema location="../Schemas/Test.xsd"/>
        <oracle-xsl-mapper:rootElement name="TrasferisciInPresenzaInput" namespace="http://www.example.org"/>
        <oracle-xsl-mapper:param name="input"/>
      </oracle-xsl-mapper:source>
    </oracle-xsl-mapper:mapSources>
    <oracle-xsl-mapper:mapTargets>
      <oracle-xsl-mapper:target type="XSD">
        <oracle-xsl-mapper:schema location="../Schemas/Test.xsd"/>
        <oracle-xsl-mapper:rootElement name="Tabulato" namespace="http://www.example.org"/>
      </oracle-xsl-mapper:target>
    </oracle-xsl-mapper:mapTargets>
    <!--GENERATED BY ORACLE XSL MAPPER 12.2.1.0.0(XSLT Build 151013.0700.0085) AT [THU FEB 23 15:14:42 CET 2017].-->
  </oracle-xsl-mapper:schema>
  <!--User Editing allowed BELOW this line - DO NOT DELETE THIS LINE-->
  <xsl:param name="input"/>
<xsl:template match="node()|@*">
    <xsl:copy>
      <xsl:apply-templates select="node()|@*"/>
    </xsl:copy>
  </xsl:template>
  
  <xsl:template match="dataContabile/text()">
    <xsl:value-of select="current-dateTime()"/>
  </xsl:template>
  
  <xsl:template match="idRichiesta/text()">
    <xsl:value-of select="'111'"/>
  </xsl:template>
  
  <xsl:template match="ripetizioneRiga[@oggetto='confezione']">
    <xsl:variable name="ansiCC">
      <xsl:value-of select="./riga/ansiCC"/>
    </xsl:variable>
     <xsl:variable name="testo">
      <xsl:value-of select="./riga/testo"/>
    </xsl:variable>
    <xsl:for-each select="$input/ns1:TrasferisciInPresenzaInput/ns1:Confezione">
       <riga>
            <ansiCC>
              <xsl:value-of select="$ansiCC"/>
            </ansiCC>
            <testo>
              <xsl:value-of select="strClass:replaceAll(strClass:replaceAll(strClass:replaceAll($testo,'\$ssccConfezione',./ns1:SSCC), '\$taglioConfezione', ./ns1:Taglio),'\$quantitaConfezione',./ns1:Quantita)"/>
            </testo>
        </riga>
     
    </xsl:for-each>
     <xsl:if test="count($input/ns1:TrasferisciInPresenzaInput/ns1:Confezione)=0">
           <riga>
                <ansiCC>
                  <xsl:value-of select="./rigaAlternativa/ansiCC"/>
                </ansiCC>
                <testo>
                  <xsl:value-of select="./rigaAlternativa/testo"/>
                </testo>
            </riga>
       </xsl:if>
  </xsl:template>
  
  
  <xsl:template match="ripetizioneRiga[@oggetto='superconfezione']">
  
        <xsl:variable name="ansiCC">
          <xsl:value-of select="./riga/ansiCC"/>
        </xsl:variable>
         <xsl:variable name="testo">
          <xsl:value-of select="./riga/testo"/>
        </xsl:variable>
        <xsl:for-each select="$input/ns1:TrasferisciInPresenzaInput/ns1:SuperConfezione">
           <riga>
                <ansiCC>
                  <xsl:value-of select="$ansiCC"/>
                </ansiCC>
                <testo>
                  <xsl:value-of select="strClass:replaceAll(strClass:replaceAll(strClass:replaceAll($testo,'\$ssccSuperconfezione',./ns1:SSCC), '\$taglioSuperconfezione', ./ns1:Taglio),'\$quantitaSuperconfezione',./ns1:Quantita)"/>
                </testo>
            </riga>
         
        </xsl:for-each>
   
       <xsl:if test="count($input/ns1:TrasferisciInPresenzaInput/ns1:SuperConfezione)=0">
           <riga>
                <ansiCC>
                  <xsl:value-of select="./rigaAlternativa/ansiCC"/>
                </ansiCC>
                <testo>
                  <xsl:value-of select="./rigaAlternativa/testo"/>
                </testo>
            </riga>
       </xsl:if>
       
  </xsl:template>
  
</xsl:stylesheet>
